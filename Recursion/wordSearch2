from collections import defaultdict

class TrieNode:
    def __init__(self):
        self.children=defaultdict(TrieNode)
        self.isWord=False
    
class Trie:
    def __init__(self):
        self.root=TrieNode()
    def insert(self, word):
        current=self.root
        for ch in word:
            current=current.children[ch]
        current.isWord=True
    def search(self, word):
        current=self.root
        for ch in word:
            current=current.children[c]
            if not current:
                return False
        return current.isWord
                
                
class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        def dfs(board, k, l, node, path, res):
            if node.isWord==True:
                res.append(path)
                node.isWord=False
                
            
            if k<0 or l<0 or k>=len(board) or l>=len(board[0]):
                return
            
            if board[k][l] not in node.children:
                return
            
            temp=board[k][l]
            board[k][l]=1
            
            
            
            dfs(board, k-1, l, node.children[temp], path+temp, res)
            dfs(board, k, l-1, node.children[temp], path+temp, res)
            dfs(board, k+1, l, node.children[temp], path+temp, res)
            dfs(board, k, l+1, node.children[temp], path+temp, res)
            
            board[k][l]=temp
            
        
        res, t = [], Trie()
        
        for word in words:
            t.insert(word)
            
        node=t.root
            
        for i in range(len(board)):
            for j in range(len(board[0])):
                dfs(board, i, j, node, "", res)
        
        return res
        
