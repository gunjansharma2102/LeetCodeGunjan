class Solution:
    def numberOfPatterns(self, m: int, n: int) -> int:
        res=0
        
        skip=[]
        
        for i in range(10):
            temp=[]
            for j in range(10):
                temp.append(0)
            skip.append(temp)
            
        skip[1][3]=skip[3][1]=2
        skip[3][9]=skip[9][3]=6
        skip[7][9]=skip[9][7]=8
        skip[1][7]=skip[7][1]=4
        skip[4][6]=skip[6][4]=skip[2][8]=skip[8][2]=skip[1][9]=skip[9][1]=skip[3][7]=skip[7][3]=5
        
        def dfs(visited1, skip, current, remaining):
            if remaining<0:
                return 0
            if remaining==0:
                return 1
        
            visited1.add(current)
            
            final=0
            
            for i in range(1, 10):
                if (i not in visited1 and (skip[current][i]==0 or skip[current][i] in visited1)):
                    final+=dfs(visited1, skip, i, remaining-1)
            
            visited1.remove(current)
            return final
        
        visited=set()
        for i in range(m, n+1):
            
            res+=dfs(visited, skip, 1, i-1)*4
            res+=dfs(visited, skip, 2, i-1)*4
            res+=dfs(visited, skip, 5, i-1)
        
        return res
    
    
    
