#DP Solution
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        dp=[]
        for i in range(m):
            temp=[]
            for j in range(n):
                temp.append(0)
            dp.append(temp)
        for i in range(m):
            dp[i][0]=1
        for i in range(n):
            dp[0][i]=1
        for i in range(1,m):
            for j in range(1,n):
                dp[i][j]=dp[i-1][j]+dp[i][j-1]
        return dp[m-1][n-1]
        

#Brute Force

class Solution:
    def __init__(self):
        self.r=0
    def dfs(self, index1, index2, m, n):
        if index1==m-1 and index2==n-1:
            self.r+=1
        if index1<m-1:
            self.dfs(index1+1, index2, m, n)
        if index2<n-1:
            self.dfs(index1, index2+1, m, n)
    def uniquePaths(self, m: int, n: int) -> int:
        self.dfs(0,0,m,n)
        return self.r
        
        
