class LRUCacheNode:
    def __init__(self, key=None, val=None):
        self.key=key
        self.val=val
        self.prev=None
        self.next=None
        
class LRUCache:

    def __init__(self, capacity: int):
        self.hashMap={}
        self.capacity=capacity
        
        
        self.head=LRUCacheNode()
        self.tail=LRUCacheNode()
        self.head.next=self.tail
        self.tail.prev=self.head
        
    def addNode(self, node):
        n=self.head.next
        self.head.next=node
        node.prev=self.head
        node.next=n
        n.prev=node
        
    def removeNode(self, node):
        p=node.prev
        n=node.next
        p.next=n
        n.prev=p
        node.next=None
        node.prev=None
        
    def removeNodeFromTail(self):
        node=self.tail.prev
        self.removeNode(node)
        return node.key
        
    def pushToHead(self, node):
        self.removeNode(node)
        self.addNode(node)

    def get(self, key: int) -> int:
        node=self.hashMap.get(key)
        if node==None:
            return -1
        self.pushToHead(node)
        return node.val
        

    def put(self, key: int, value: int) -> None:
        
        node=self.hashMap.get(key)
        if node:
            self.pushToHead(node)
            node.val=value
            return
        
        newNode=LRUCacheNode(key, value)
        self.hashMap[key]=newNode
        self.capacity-=1
        self.addNode(newNode)
        if self.capacity<0:
            k=self.removeNodeFromTail()
            del self.hashMap[k]
            self.capacity+=1
        
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
