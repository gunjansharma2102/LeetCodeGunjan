class NumMatrix:

    def __init__(self, matrix: List[List[int]]):
        
        self.matrix=matrix
        self.sumMatrix=[]
        
        if len(matrix)==0:
            return
        
        if len(matrix[0])==0:
            return
        
        for i in range(len(matrix)):
            temp=[]
            for j in range(len(matrix[i])):
                temp.append(matrix[i][j])
            self.sumMatrix.append(temp)
        
        for i in range(1,len(self.sumMatrix)):
            self.sumMatrix[i][0]+=self.sumMatrix[i-1][0]
            
        for j in range(1,len(self.sumMatrix[0])):
            self.sumMatrix[0][j]+=self.sumMatrix[0][j-1]
            
        for i in range(1, len(self.sumMatrix)):
            for j in range(1, len(self.sumMatrix[i])):
                self.sumMatrix[i][j]+=self.sumMatrix[i-1][j]+self.sumMatrix[i][j-1]-self.sumMatrix[i-1][j-1]
                
    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:
        
        if len(self.sumMatrix)==0:
            return 0
        
        if row1==row2 and col1==col2:
            return self.matrix[row1][col1]
        
        if row1==col1==0:
            temp1=0
            temp2=0
            temp=0
        elif row1==0:
            temp1=0
            temp=0
            temp2=self.sumMatrix[row2][col1-1]
        elif col1==0:
            temp1=self.sumMatrix[row1-1][col2]
            temp2=0
            temp=0
        else:
            temp1=self.sumMatrix[row1-1][col2]
            temp2=self.sumMatrix[row2][col1-1]
            temp=self.sumMatrix[row1-1][col1-1]
            
        return self.sumMatrix[row2][col2]-temp1-temp2+temp


# Your NumMatrix object will be instantiated and called as such:
# obj = NumMatrix(matrix)
# param_1 = obj.sumRegion(row1,col1,row2,col2)
