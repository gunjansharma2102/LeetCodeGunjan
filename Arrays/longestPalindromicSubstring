class Solution:
    def longestPalindrome(self, s: str) -> str:
        def expandFromMiddle(s, i, j):
            if i<0 or j>len(s)-1 or s[i]!=s[j]:
                return 0
            while i>0 and j<len(s)-1 and s[i-1]==s[j+1]:
                i-=1
                j+=1
            return j-i+1
        if s==None or len(s)<=1:
            return s
        start=0
        end=0
        for k in range(len(s)):
            lenFirst=expandFromMiddle(s, k, k)
            lenSecond=expandFromMiddle(s, k, k+1)
            lenPalindrome = max(lenFirst, lenSecond)
            if lenPalindrome>end-start+1:
                start=k-(lenPalindrome-1)//2
                end=k+lenPalindrome//2
        return s[start:end+1]
            
            
        
