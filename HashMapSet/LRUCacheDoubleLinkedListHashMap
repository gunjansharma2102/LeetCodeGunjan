class DoubleLinkedListNode:
    def __init__(self):
        self.value=0
        self.key=0
        self.prev=None
        self.next=None
    
class LRUCache:

    def __init__(self, capacity: int):
        self.cache={}
        self.size=0
        self.capacity=capacity
        self.head=DoubleLinkedListNode()
        self.tail=DoubleLinkedListNode()
        self.head.next=self.tail
        self.tail.prev=self.head
        
    def addNode(self, node):
        
        node.prev=self.head
        node.next=self.head.next
        self.head.next.prev=node
        self.head.next=node
        
        
    def removeNode(self, node):
        prev=node.prev
        next=node.next
        
        prev.next=next
        next.prev=prev
        
    def move_to_head(self, node):
        self.removeNode(node)
        self.addNode(node)
        
    def removeTail(self):
        res=self.tail.prev
        self.removeNode(res)
        
        return res
        
        
        

    def get(self, key: int) -> int:
        
        node=self.cache.get(key, None)
        
        if not node:
            return -1
        self.move_to_head(node)
        return node.value
        

    def put(self, key: int, value: int) -> None:
        
        node=self.cache.get(key,None)
        
        if node:
            node.value=value
            self.move_to_head(node)
        else:
            node=DoubleLinkedListNode()
            node.key=key
            node.value=value
            self.addNode(node)
            self.cache[key]=node
            self.size+=1
            
        if self.size>self.capacity:
            tail=self.removeTail()
            del self.cache[tail.key]
            self.size-=1
            
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
