#Iteration


from collections import deque
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        if root==None:
            return None
        q=deque([root, TreeNode('dummy')])
        
        result=[]
        temp=[]
        while q:
            n=q.popleft()
            if n.val=='dummy':
                if q:
                    q.append(TreeNode('dummy'))
                else:
                    if temp!=[]:
                        result.append(temp)
                    break
                result.append(temp)
                temp=[]
            else:
                temp.append(n.val)
                if n.left!=None:
                    q.append(n.left)
                if n.right!=None:
                    q.append(n.right)
        return result
        
        
        
#Recursion

from collections import deque
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        if root==None:
            return None
        result=[]
        def traverse(node, level):
            if len(result)==level:
                result.append([])
            result[level].append(node.val)
            if node.left:
                traverse(node.left,level+1)
            if node.right:
                traverse(node.right,level+1)
        traverse(root, 0)
        return result
                
        
                
        
