
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        def serializeHelper(node, string):
            
            if node==None:
                string+="None,"
                return string
            string+=str(node.val)+","
            string=serializeHelper(node.left, string)
            string=serializeHelper(node.right, string)
            
            return string
            
        return serializeHelper(root, "")
        

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        def deserializeHelper(l):
            if l[0]=="None" or l[0]=="":
                l.pop(0)
                return None
            node=TreeNode(l[0])
            l.pop(0)
            node.left=deserializeHelper(l)
            node.right=deserializeHelper(l)
            return node
            
        dataList=data.split(",")
        root=deserializeHelper(dataList)
        return root
        

# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.deserialize(codec.serialize(root))
