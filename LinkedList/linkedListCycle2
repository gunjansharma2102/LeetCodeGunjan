# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: ListNode) -> ListNode:
        if head==None or head.next==None:
            return None
        spointer=head
        fpointer=head
        ptr1=head
        while fpointer!=None and fpointer.next!=None:
            spointer=spointer.next
            fpointer=fpointer.next.next
            if fpointer==spointer:
                while ptr1!=spointer:
                    ptr1=ptr1.next
                    spointer=spointer.next
                return ptr1
        return None
        
            
        
