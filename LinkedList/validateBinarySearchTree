#Recursion

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        def traverse(node, lower = float('-inf'), upper = float('inf')):
            if node==None:
                return True
            val=node.val
            if lower>=val or upper<=val:
                return False
            l=traverse(node.left,lower,val)
            r=traverse(node.right,val,upper)
            return (l and r)
        return traverse(root)
        
        
#Iteration

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        if root==None:
            return True
        stack=[[root, float('-inf'), float('inf')]]
        while stack:
            node, lower, upper = stack.pop()
            if not node:
                continue
            if node.val<=lower or node.val>=upper:
                return False
            stack.append([node.left, lower, node.val])
            stack.append([node.right, node.val, upper])
        return True
        
