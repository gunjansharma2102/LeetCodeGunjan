#Better Solution

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        stack1=[]
        stack2=[]
        while l1:
            stack1.append(l1.val)
            l1=l1.next
        while l2:
            stack2.append(l2.val)
            l2=l2.next
            
        carry=0
        dummy=None
        while stack1 or stack2 or carry:
            if stack1:
                val1=stack1.pop()
            else:
                val1=0
                
            if stack2:
                val2=stack2.pop()
            else:
                val2=0
            
            v=val1+val2+carry
            carry=v//10
            
            newNode=ListNode(v%10)
            
            newNode.next=dummy
            dummy=newNode
        return newNode
            








# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        
        num1=num2=0
        
        while l1:
            num1=num1*10+l1.val
            l1=l1.next
            
        while l2:
            num2=num2*10+l2.val
            l2=l2.next
            
        finalNum=str(num1+num2)
        
        dummy=temp=ListNode()
        
        for char in finalNum:
            dummy.next=ListNode(int(char))
            dummy=dummy.next
            
        return temp.next
            
            
        
