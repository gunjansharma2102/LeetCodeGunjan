class MyLinkedListNode:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.val=None
        self.next=None
    
    def __init__(self, val):
        """
        Initialize your data structure here.
        """
        self.val=val
        self.next=None
        
class MyLinkedList:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.head=None
        self.length=0
        

    def get(self, index: int) -> int:
        """
        Get the value of the index-th node in the linked list. If the index is invalid, return -1.
        """
        if index>self.length-1 or index<0:
            return -1
        returnNode= self.head
        for i in range(index):
            returnNode=returnNode.next
        return returnNode.val
        

    def addAtHead(self, val: int) -> None:
        """
        Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.
        """
        newNode=MyLinkedListNode(val)
        if self.length==0:
            self.head=newNode
        else:
            newNode.next=self.head
            self.head=newNode
        self.length+=1
            
        

    def addAtTail(self, val: int) -> None:
        """
        Append a node of value val to the last element of the linked list.
        """
        newNode=MyLinkedListNode(val)
        temp=self.head
        if self.length==0:
            self.head=newNode
        else:
            while temp.next!=None:
                temp=temp.next
            temp.next=newNode
        self.length+=1
        

    def addAtIndex(self, index: int, val: int) -> None:
        """
        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.
        """
        newNode=MyLinkedListNode(val)
        if index>self.length or index<0:
            return
        elif index==0:
            self.addAtHead(val)
        elif index==self.length:
            self.addAtTail(val)
        else:
            temp=self.head
            for i in range(index-1):
                temp=temp.next
            newNode.next=temp.next
            temp.next=newNode
            self.length+=1

    def deleteAtIndex(self, index: int) -> None:
        """
        Delete the index-th node in the linked list, if the index is valid.
        """
        if index>self.length-1 or index<0:
            return
        elif index==0:
            self.head=self.head.next
            self.length-=1
        else:
            temp=self.head
            for i in range(index-1):
                temp=temp.next
            temp.next=temp.next.next
            self.length-=1
        


# Your MyLinkedList object will be instantiated and called as such:
# obj = MyLinkedList()
# param_1 = obj.get(index)
# obj.addAtHead(val)
# obj.addAtTail(val)
# obj.addAtIndex(index,val)
# obj.deleteAtIndex(index)
